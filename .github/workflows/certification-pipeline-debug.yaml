name: RHDH Plugin Certification Pipeline debug

on:
  push:
    branches:
      - main
#   pull_request:
#     branches:
#       - main
  workflow_dispatch:

jobs:
  detect-changes:
    name: Detect PR Changes
    runs-on: ubuntu-latest
    outputs:
      modified_files: ${{ steps.changed-files.outputs.all_changed_files }}
      plugin_name: ${{ steps.extract-plugin.outputs.plugin_name }}
      package_yaml: ${{ steps.extract-plugin.outputs.package_yaml }}
      smoke_test_file: ${{ steps.extract-plugin.outputs.smoke_test_file }}
    steps:
      - name: üõéÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üîç Get Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
            files: plugins/**/*

      - name: üì• Save Repository as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo-artifact
          path: .  # Saves the entire repository

      - name: üì• Extract Plugin Name and Package.yaml Path
        id: extract-plugin
        run: |
          PLUGIN_NAME=""
          VERSION=""
          PACKAGE_YAML=""
          SMOKE_TEST_FILE=""
          pwd

          if [[ -z "${{ steps.changed-files.outputs.all_changed_files }}" ]]; then
            echo "No plugin-related changes detected."
            echo "PLUGIN_NAME=" >> $GITHUB_ENV
            echo "VERSION=" >> $GITHUB_ENV
            echo "PACKAGE_YAML=" >> $GITHUB_ENV
            echo "SMOKE_TEST_FILE=" >> $GITHUB_ENV
            exit 0
          fi

          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ "$file" == plugins/*/*/package.yaml ]]; then
                PLUGIN_NAME=$(echo "$file" | cut -d'/' -f2)  # Extract plugin-name
                VERSION=$(echo "$file" | cut -d'/' -f3)  # Extract version

                # Check if the smoke test file exists in the repository
                SMOKE_TEST_FILE="plugins/$PLUGIN_NAME/$VERSION/smoke-test.ts"
                if [[ -f "$SMOKE_TEST_FILE" ]]; then
                  echo "Smoke test file exists: $SMOKE_TEST_FILE"
                else
                  echo "WARNING: No smoke-test.ts found for plugin $PLUGIN_NAME (version $VERSION)."
                  SMOKE_TEST_FILE=""  # Don't set an invalid path
                fi

                echo "Plugin name: $PLUGIN_NAME"
                echo "Version: $VERSION"
                echo "PLUGIN_NAME=$PLUGIN_NAME" >> $GITHUB_ENV
                echo "PLUGIN_NAME=$PLUGIN_NAME" >> $GITHUB_OUTPUT
                echo "VERSION=$VERSION" >> $GITHUB_ENV
                echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
                echo "PACKAGE_YAML=$file" >> $GITHUB_ENV
                echo "PACKAGE_YAML=$file" >> $GITHUB_OUTPUT
                echo "Smoke Test File: $SMOKE_TEST_FILE"
                echo "SMOKE_TEST_FILE=$SMOKE_TEST_FILE" >> $GITHUB_ENV
                echo "SMOKE_TEST_FILE=$SMOKE_TEST_FILE" >> $GITHUB_OUTPUT
            fi
          done
       
  setup-and-deploy:
    name: Setup and Deploy - ${{ needs.detect-changes.outputs.plugin_name }}
    runs-on: ubuntu-latest
    needs: detect-changes
    steps:
      - name: üì§ Download Repository Artifact
        uses: actions/download-artifact@v4
        with:
          name: repo-artifact
          path: .

      - name: üåê Set Up Kubeconfig and Connect to OpenShift
        uses: actions-hub/kubectl@master
        env:
          #cat $HOME/.kube/config | base64
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: cluster-info
      
      - name: üõ†Ô∏è Install Helm
        run: |
          sudo apt update
          sudo apt install -y g++
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install -y apt-transport-https
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install -y helm
      
      - name: üåê Setup Kubeconfig and Verify Connection
        run: |
          mkdir /opt/.kube 
          echo "$KUBESECRET" | base64  -d > /opt/.kube/config
          helm --kubeconfig /opt/.kube/config list
        env:
          KUBESECRET: ${{ secrets.KUBE_CONFIG }}
      
      - name: üì¶ Deploy Red Hat Developer Hub and Plugin
        run: |
          helm repo add openshift-helm-charts https://charts.openshift.io/
          helm --kubeconfig /opt/.kube/config install -f values.yaml \
            redhat-developer-hub openshift-helm-charts/redhat-developer-hub \
            --namespace rhdh-smoketest --create-namespace
     
      - name: Upgrade Helm Release to include Plugin
        run: |
          helm --kubeconfig /opt/.kube/config upgrade --reuse-values -f "${{ needs.detect-changes.outputs.package_yaml }}" \
            redhat-developer-hub openshift-helm-charts/redhat-developer-hub \
            --namespace rhdh-smoketest
  
  run-smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    needs: 
      - setup-and-deploy
      - detect-changes
    steps:
      - name: üõéÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: ‚úÖ Verify Smoke Test File
        run: |
          echo "Checking for smoke test file: $GITHUB_WORKSPACE/${{ needs.detect-changes.outputs.smoke_test_file }}"
          if [[ ! -f "$GITHUB_WORKSPACE/${{ needs.detect-changes.outputs.smoke_test_file }}" ]]; then
            echo "ERROR: Smoke test file does not exist!"
            exit 1
          else
            echo "Smoke test file found."
            cat "$GITHUB_WORKSPACE/${{ needs.detect-changes.outputs.smoke_test_file }}"
          fi

      - name: üì• Clone RHDH Repository
        run: |
          git clone --branch release-1.4 --single-branch https://github.com/redhat-developer/rhdh "$GITHUB_WORKSPACE/rhdh"
          ls -l "$GITHUB_WORKSPACE"

      - name: Veryify Branch
        run: |
          cd "$GITHUB_WORKSPACE/rhdh"
          git branch --show-current

      - name: Setup Node.js
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'

      - name: üöÄ Install Dependencies
        working-directory: rhdh
        run: |
          pwd
          yarn install

      - name: üî¨ Install Playwright Dependencies
        working-directory: rhdh/e2e-tests
        run: |
          yarn install
          yarn playwright install chromium

      - name: üìù Copy Smoke Test File to Playwright Directory
        working-directory: rhdh/e2e-tests
        env:
          SMOKE_TEST_FILE: ${{ needs.detect-changes.outputs.smoke_test_file }}
        run: |
          cp $GITHUB_WORKSPACE/$SMOKE_TEST_FILE playwright/e2e/
          echo "Copied $GITHUB_WORKSPACE/$SMOKE_TEST_FILE to playwright/e2e/"
    
      - name: ‚úÖ Run Playwright Smoke Test
        env:
          BASE_URL: https://redhat-developer-hub-rhdh-smoketest.apps.dancurran-lab2025.opdev.io/
          SMOKE_TEST_FILE: ${{ needs.detect-changes.outputs.smoke_test_file }}
        run: |
          cd rhdh/e2e-tests

          echo "SMOKE_TEST_FILE path: $GITHUB_WORKSPACE/$SMOKE_TEST_FILE"
          cat $GITHUB_WORKSPACE/$SMOKE_TEST_FILE
          yarn playwright test playwright/e2e/smoke-test.ts


  cleanup:
    name: Cleanup Deployment
    runs-on: ubuntu-latest
    needs: run-smoke-tests
    if: always()  # Ensures cleanup runs even if previous steps fail
    steps:
      - name: üõ†Ô∏è Set Up Kubeconfig
        run: |
          mkdir -p /opt/.kube
          echo "$KUBESECRET" | base64 -d > /opt/.kube/config
        env:
          KUBESECRET: ${{ secrets.KUBE_CONFIG }}

      - name: üìú Get Helm Release Name
        run: |
          RELEASE_NAME=$(helm --kubeconfig /opt/.kube/config list -n rhdh-smoketest -q | head -n 1)
          if [ -z "$RELEASE_NAME" ]; then
            echo "No Helm releases found in namespace rhdh-smoketest. Skipping uninstallation."
            exit 0
          fi
          echo "Found Helm release: $RELEASE_NAME"
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

      - name: ‚ùå Uninstall Helm Release
        run: |
          helm uninstall --kubeconfig /opt/.kube/config $RELEASE_NAME --namespace rhdh-smoketest
          echo "‚úÖ Helm release '$RELEASE_NAME' has been uninstalled."
        env:
          RELEASE_NAME: ${{ env.RELEASE_NAME }}