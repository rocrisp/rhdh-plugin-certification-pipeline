name: RHDH Plugin Certification Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup-and-deploy:
    name: Setup and Deploy RHDH on Openshift Cluster
    runs-on: ubuntu-latest
    steps:
      - name: üõéÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üåê Set Up Kubeconfig and Connect to OpenShift
        uses: actions-hub/kubectl@master
        env:
          #cat $HOME/.kube/config | base64
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: cluster-info
      
      - name: üõ†Ô∏è Install Helm
        run: |
          sudo apt update
          sudo apt install -y g++
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install -y apt-transport-https
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install -y helm
      
      - name: üåê Setup Kubeconfig and Verify Connection
        run: |
          mkdir /opt/.kube 
          echo "$KUBESECRET" | base64  -d > /opt/.kube/config
          helm --kubeconfig /opt/.kube/config list
        env:
          KUBESECRET: ${{ secrets.KUBE_CONFIG }}
      
      - name: üì¶ Deploy Red Hat Developer Hub and Plugin
        run: |
          helm repo add openshift-helm-charts https://charts.openshift.io/
          helm --kubeconfig /opt/.kube/config install -f values.yaml \
            redhat-developer-hub openshift-helm-charts/redhat-developer-hub \
            --namespace rhdh-smoketest --create-namespace

  configure-deploy-dynamic-plugin:
    name: Configure and Deploy Dynamic Plugin
    runs-on: ubuntu-latest
    needs: setup-and-deploy
    steps:
      - name: üåê Setup Kubeconfig and Verify Connection
        run: |
          mkdir /opt/.kube 
          echo "$KUBESECRET" | base64  -d > /opt/.kube/config
          helm --kubeconfig /opt/.kube/config list
        env:
          KUBESECRET: ${{ secrets.KUBE_CONFIG }}

      - name: Upgrade Helm Release
        run: |
          helm --kubeconfig /opt/.kube/config upgrade --reuse-values -f backstage-community-plugin-todo/package.yml \
            redhat-developer-hub openshift-helm-charts/redhat-developer-hub \
            --namespace rhdh-smoketest

  run-smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    needs: configure-deploy-dynamic-plugin
    steps:
      - name: üì• Clone RHDH Repository
        run: |
          git clone https://github.com/rocrisp/rhdh "$GITHUB_WORKSPACE/rhdh"
          ls -l "$GITHUB_WORKSPACE"

      - name: Setup Node.js
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'

      - name: üöÄ Install Dependencies
        working-directory: rhdh
        run: |
          pwd
          yarn install

      - name: üî¨ Install Playwright Dependencies
        working-directory: rhdh/e2e-tests
        run: |
          yarn install
          yarn playwright install chromium

      - name: ‚úÖ Run Playwright Smoke Test
        env:
          BASE_URL: https://redhat-developer-hub-rhdh-smoketest.apps.dancurran-lab2025.opdev.io/
        run: |
          cd rhdh/e2e-tests
          npx playwright test playwright/e2e/smoke-test.spec.ts

  cleanup:
    name: Cleanup Deployment
    runs-on: ubuntu-latest
    needs: run-smoke-tests
    if: always()  # Ensures cleanup runs even if previous steps fail
    steps:
      - name: üõ†Ô∏è Set Up Kubeconfig
        run: |
          mkdir -p /opt/.kube
          echo "$KUBESECRET" | base64 -d > /opt/.kube/config
        env:
          KUBESECRET: ${{ secrets.KUBE_CONFIG }}

    #   - name: üîç Get Helm Version
    #     run: |
    #       HELM_VERSION=$(helm version --short)
    #       echo "Helm version: $HELM_VERSION"
    #       echo "HELM_VERSION=$HELM_VERSION" >> $GITHUB_ENV

      - name: üìú Get Helm Release Name
        run: |
          RELEASE_NAME=$(helm --kubeconfig /opt/.kube/config list -n rhdh-smoketest -q | head -n 1)
          if [ -z "$RELEASE_NAME" ]; then
            echo "No Helm releases found in namespace rhdh-smoketest. Skipping uninstallation."
            exit 0
          fi
          echo "Found Helm release: $RELEASE_NAME"
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

      - name: ‚ùå Uninstall Helm Release
        run: |
          helm uninstall --kubeconfig /opt/.kube/config $RELEASE_NAME --namespace rhdh-smoketest
          echo "‚úÖ Helm release '$RELEASE_NAME' has been uninstalled."
        env:
          RELEASE_NAME: ${{ env.RELEASE_NAME }}
