name: RHDH Plugin Certification Pipeline

on:
  workflow_dispatch:

jobs:
  detect-changes:
    name: Detect PR Changes
    runs-on: ubuntu-latest
    outputs:
      modified_files: ${{ steps.changed-files.outputs.all_changed_files }}
      plugin_name: ${{ steps.extract-plugin.outputs.plugin_name }}
      package_yaml: ${{ steps.extract-plugin.outputs.package_yaml }}
    steps:
      - name: üõéÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üîç Get Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: plugins/**/package.yaml

      - name: üì• Save Repository as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: repo-artifact
          path: |
            plugins/
            values.yaml
            rhdh/
          retention-days: 7

      - name: ‚úÖ Confirm Artifact Upload
        run: echo "‚úÖ Artifact repo-artifact uploaded successfully!"

      - name: üì• Extract Plugin Name and Package.yaml Path
        id: extract-plugin
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          if [[ "$file" == plugins/*/package.yaml ]]; then
            PLUGIN_NAME=$(echo "$file" | cut -d'/' -f2)
            echo "PLUGIN_NAME=$PLUGIN_NAME" >> $GITHUB_OUTPUT
            echo "PACKAGE_YAML=$file" >> $GITHUB_OUTPUT
          fi
          done

  setup-and-deploy:
    name: Setup and Deploy - ${{ needs.detect-changes.outputs.plugin_name }}
    runs-on: ubuntu-latest
    needs: detect-changes
    steps:
      - name: List Available Artifacts
        run: |
          echo "üîç Fetching available artifacts..."
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts")

          echo "Response from GitHub API:"
          echo "$RESPONSE" | jq

          echo "Extracting artifact names..."
          echo "$RESPONSE" | jq -r '.artifacts[]?.name // "No artifacts found"'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Repository Artifact
        uses: actions/download-artifact@v4
        with:
          name: repo-artifact
          path: .

      - name: Check if Artifact Exists
        run: |
          echo "Checking if repo-artifact exists..."
          ARTIFACT_COUNT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" | jq '[.artifacts[] | select(.name=="repo-artifact")] | length')

          if [ "$ARTIFACT_COUNT" -eq 0 ]; then
            echo "‚ùå ERROR: Artifact 'repo-artifact' not found!"
            exit 1
          else
            echo "‚úÖ Artifact 'repo-artifact' exists!"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üåê Set Up Kubeconfig and Install Helm
        run: |
          sudo apt update && sudo apt install -y g++
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install -y apt-transport-https
          sudo apt-get update && sudo apt-get install -y helm
        env:
          KUBESECRET: ${{ secrets.KUBE_CONFIG }}

      - name: üì¶ Deploy Red Hat Developer Hub
        run: |
          helm repo add openshift-helm-charts https://charts.openshift.io/
          helm --kubeconfig /opt/.kube/config install -f values.yaml \
            redhat-developer-hub openshift-helm-charts/redhat-developer-hub \
            --namespace rhdh-smoketest --create-namespace

      - name: Install Dynamic Plugin
        if: ${{ needs.detect-changes.outputs.modified_files != '' }}
        run: |
          helm --kubeconfig /opt/.kube/config upgrade --reuse-values -f "${{ needs.detect-changes.outputs.package_yaml }}" \
            redhat-developer-hub openshift-helm-charts/redhat-developer-hub \
            --namespace rhdh-smoketest

  run-smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: setup-and-deploy
    env:
      BASE_URL: https://redhat-developer-hub-rhdh-smoketest.apps.dancurran-lab2025.opdev.io/
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üöÄ Install Dependencies
        run: |
          cd rhdh
          yarn install

      - name: üî¨ Install Playwright Dependencies
        run: |
          cd rhdh/e2e-tests
          yarn playwright install chromium

      - name: ‚úÖ Run Playwright Smoke Test
        run: |
          cd rhdh/e2e-tests
          yarn playwright test \
            playwright/e2e/plugins/dynamic-plugins-info/dynamic-plugins-info.spec.ts \
            --project="smoke-test" \
            --output=playwright-report

  upload-logs-and-report:
    name: Upload Logs and Deploy Report
    runs-on: ubuntu-latest
    needs: run-smoke-tests
    if: always()
    steps:
      - name: üì§ Upload Playwright Report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: rhdh/e2e-tests/playwright-report/
          retention-days: 7

      - name: üöÄ Deploy Playwright Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: rhdh/e2e-tests/playwright-report/
          keep_files: true

      - name: üîó Print Playwright Report Link
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(basename "${{ github.repository }}")
          echo "‚úÖ Playwright Report is available!"
          echo "üîó [Click here to view the report](https://${REPO_OWNER}.github.io/${REPO_NAME}/playwright-report/index.html)"

  cleanup:
    name: Cleanup Deployment
    runs-on: ubuntu-latest
    needs: upload-logs-and-report
    if: always()
    steps:
      - name: üìú Get Helm Release Name
        run: |
          RELEASE_NAME=$(helm --kubeconfig /opt/.kube/config list -n rhdh-smoketest -q | head -n 1)
          if [ -z "$RELEASE_NAME" ]; then
            echo "‚ö†Ô∏è No Helm releases found, skipping uninstallation."
            exit 0
          fi
          echo "Found Helm release: $RELEASE_NAME"
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

      - name: ‚ùå Uninstall Helm Release
        run: |
          helm uninstall --kubeconfig /opt/.kube/config $RELEASE_NAME --namespace rhdh-smoketest
          echo "‚úÖ Helm release '$RELEASE_NAME' has been uninstalled."
        env:
          RELEASE_NAME: ${{ env.RELEASE_NAME }}
